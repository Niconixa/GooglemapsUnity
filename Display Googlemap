using UnityEngine;
using System.Collections;
using UnityEngine.Networking;
using UnityEngine.UI;

public class GoogleMaps : MonoBehaviour
{
    public enum MapType
    {
        RoadMap,
        Satellite,
        Terrain,
        Hybrid
    }

    public string GoogleApiKey;
    public bool loadOnStart = true;
    public bool autoLocateCenter = true;
    //center loc split into 3 parts below
    public GoogleMapLocation centerLocation;
    public int zoom = 16;
    public MapType mapType;
    public int size = 512;
//    public float sizeDelta = -1;
    public bool doubleResolution = false;
    public GoogleMapMarker[] markers;
    private float getLat;
    private float getLong;

    void Start()
    {
        Refresh();
    }

    private void Update()
    {
        getLat = GPSLocation.Instance.latitude;
        getLong = GPSLocation.Instance.longitude;
    }

    bool GPSCoordinates()
    {
        if (getLat != 0 && getLong != 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public void Refresh()
    {
        if (autoLocateCenter && (markers.Length == 0))
        {
            Debug.LogError("Auto Center will only work if paths or markers are used.");
        }
        StartCoroutine(_Refresh());
    }

    IEnumerator _Refresh()
    {
        string url = "https://maps.googleapis.com/maps/api/staticmap";
        string qs = "";
        if (!autoLocateCenter)
        {
            if (centerLocation.address != "")
                qs += "center=" + UnityWebRequest.UnEscapeURL(centerLocation.address);
            else
                yield return new WaitUntil(GPSCoordinates);
            qs += "center=" + UnityWebRequest.UnEscapeURL(string.Format("{0},{1}", getLat, getLong));

            qs += "&zoom=" + zoom.ToString();

        }
        qs += "&size=" + UnityWebRequest.UnEscapeURL(string.Format("{0}x{0}", size));
        qs += "&scale=" + (doubleResolution ? "2" : "1");
        qs += "&maptype=" + mapType.ToString().ToLower();
        var usingSensor = false;

        usingSensor = Input.location.isEnabledByUser && Input.location.status == LocationServiceStatus.Running;

        qs += "&sensor=" + (usingSensor ? "true" : "false");

        foreach (var i in markers)
        {
            qs += "&markers=" + string.Format("size:{0}|color:{1}|label:{2}", i.size.ToString().ToLower(), i.color, i.label);

            foreach (var loc in i.locations)
            {
                if (loc.address != "")
                    qs += "|" + UnityWebRequest.UnEscapeURL(loc.address);
                else
                           qs += "|" + UnityWebRequest.UnEscapeURL(string.Format("{0},{1}", loc.latitude, loc.longitude));
            }
        }
        //my location!
        qs += "&markers=" + string.Format("size:{0}|color:{1}|label:{2}", "Mid", "red", "Current Location");
        qs += "|" + UnityWebRequest.UnEscapeURL(string.Format("{0},{1}", getLat, getLong));

        qs += "&key=" + UnityWebRequest.UnEscapeURL(GoogleApiKey);
        string requestUrl = url + "?" + qs;
        UnityWebRequest request = UnityWebRequestTexture.GetTexture(requestUrl);
        Debug.Log(requestUrl);

        yield return request.SendWebRequest();
        if (request.isNetworkError || request.isHttpError)
        {
            Debug.Log(request.error);
        }

        else
              {
                  Texture2D texture = DownloadHandlerTexture.GetContent(request);
             //    Set the renderer to display newly downloaded texture
                 SpriteRenderer spriteRenderer = GetComponent<SpriteRenderer>();
                spriteRenderer.sprite = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.width), new Vector2(0.5f, 0.5f));
                 spriteRenderer.material.mainTexture = texture;
                    spriteRenderer.material.shader = Shader.Find("Sprites/Default");
             //     Set the camera to fith width-wise with the texture
                  Camera.main.orthographicSize = ((texture.width / ((float)spriteRenderer.sprite.pixelsPerUnit)) / 2) / (Screen.width / ((float)Screen.height));
             }
    }
}

public enum GoogleMapColor
{
    black,
    yellow,
    blue,
    gray,
    red,
    green
}

[System.Serializable]
public class GoogleMapLocation
{
    public string address;
    public float latitude;
    public float longitude;
}

[System.Serializable]
public class GoogleMapMarker
{
    public enum GoogleMapMarkerSize
    {
        Tiny,
        Small,
        Mid
    }
    public GoogleMapMarkerSize size;
    public GoogleMapColor color;
    public string label;
    public GoogleMapLocation[] locations;

}
